#!/usr/bin/python3

from make_divider import make_divider
from kalman_steady_state import steady_state_P
import numpy as np
import sys
import os

ts = 1/40
sigsq_z = 5 ** 2
sigsq_a = 20 ** 2

F_full = np.asarray([[1,    ts,   1/2*ts**2],
                     [0,    1,    ts],
                     [0,    0,    1]])
H = np.asarray([[1, 0, 0]])
R = np.asarray([[sigsq_z]])
G = np.asarray([[1/6*ts**3],
                   [1/2*ts**2],
                   [ts]])
Q = G * G.T * sigsq_a

P = steady_state_P(F_full, H, R, Q, 1/(1<<16))
Pt = [P[0][0], P[0][1], P[0][2],
               P[1][1], P[1][2],
                        P[2][2]]

invdenom = 1 / (2*Pt[1]*ts + Pt[0] + sigsq_z)

div_x0_x1 = make_divider(1/(ts / 16 * invdenom * sigsq_z), 16, "div_x0_x1", signed=True)
div_x0_x0zk = make_divider(1/(invdenom * sigsq_z), 16, "div_x0_x0zk", signed=True)
div_x1_x2 = make_divider(1/ts, 16, "div_x1_x2", signed=True)
div_x1_x1 = make_divider(1/(1 - Pt[1] * ts * invdenom), 16, "div_x1_x1", signed=True)
div_x1_x0zk = make_divider(1/(((Pt[3] + Pt[2]) * ts + Pt[1]) * 16 * invdenom), 16, "div_x1_x0zk", signed=True)
div_x2_x1 = make_divider(1/(Pt[2] * ts * invdenom), 16, "div_x2_x1", signed=True)
div_x2_x0zk = make_divider(1/((Pt[4] * ts + Pt[2]) * 16 * invdenom), 16, "div_x2_x0zk", signed=True)

outfile = sys.argv[1]

guard_define = os.path.basename(outfile).upper()\
    .translate({ord(c): "_" for c in "\"\'!@#$%^&*()[]{};:,./<>?\\|`~-=+"})

outstr = f"""
// Generated by {os.path.basename(__file__)}

#ifndef {guard_define}
#define {guard_define}

#include <stdint.h>

{div_x0_x1}
{div_x0_x0zk}
{div_x1_x2}
{div_x1_x1}
{div_x1_x0zk}
{div_x2_x1}
{div_x2_x0zk}

void update_kalman(int16_t* x_nn_new, const int16_t* x_nn, int16_t zk) {{
    x_nn_new[0] = zk
                + div_x0_x1(x_nn[1])
                + div_x0_x0zk(x_nn[0] - zk);
    x_nn_new[1] = div_x1_x2(x_nn[2])
                + div_x1_x1(x_nn[1])
                - div_x1_x0zk(x_nn[0] - zk);
    x_nn_new[2] = x_nn[2]
                - div_x2_x1(x_nn[1])
                - div_x2_x0zk(x_nn[0] - zk);
}}

#endif
"""

with open(sys.argv[1], "w") as f:
    f.write(outstr)